{
  "author": {
    "name": "Marat Dulin",
    "email": "mdevils@yandex.ru"
  },
  "description": "JavaScript Style Checker",
  "name": "jscs",
  "version": "1.0.14",
  "repository": {
    "type": "git",
    "url": "https://github.com/mdevils/node-jscs"
  },
  "contributors": [
    {
      "name": "Marat Dulin",
      "email": "mdevils@yandex.ru"
    },
    {
      "name": "Ikonnikov Konstantin"
    },
    {
      "name": "Igor Agarlev"
    },
    {
      "name": "Alexey Androsov",
      "email": "doochik@ya.ru"
    }
  ],
  "engines": {
    "node": ">= 0.8.0"
  },
  "dependencies": {
    "esprima": "1.0.3",
    "vow": "0.3.9",
    "vow-fs": "0.2.3",
    "colors": "0.6.0-1",
    "commander": "1.2.0",
    "minimatch": "0.2.12",
    "glob": "3.2.7"
  },
  "devDependencies": {
    "jshint": "2.1.3",
    "mocha": "1.11.0",
    "browserify": "2.35.0"
  },
  "bin": {
    "jscs": "./bin/jscs"
  },
  "scripts": {
    "test": "jshint . && node bin/jscs lib test && mocha -u bdd -R spec"
  },
  "readme": "node-jscs [![Build Status](https://travis-ci.org/mdevils/node-jscs.png?branch=master)](https://travis-ci.org/mdevils/node-jscs)\n=========\n\nJSCS â€” JavaScript Code Style.\n\n`jscs` is a code style checker. `jscs` can check cases, which are not implemeted in jshint,\nbut it does not duplicate `jshint` functionality, so you should use `jscs` and `jshint` together.\n\nFriendly packages\n-----------------\n\n * JSCS Grunt Task: https://github.com/gustavohenke/grunt-jscs-checker\n\nInstallation\n------------\n\n`jscs` can be installed using `npm`:\n\n```\nnpm install jscs\n```\n\nTo run `jscs`, you can use the following command from the project root:\n\n```\n./node_modules/.bin/jscs path[ path[...]]\n```\n\nConfiguration\n-------------\n\n`jscs` is configured using `.jscs.json` file, located in the project root.\n\nExample configuration:\n\n```javascript\n{\n    /*\n        Option: requireCurlyBraces\n        Requires curly braces after statements.\n\n        Valid example:\n\n        if (x) {\n            x++;\n        }\n\n        Invalid example:\n\n        if (x) x++;\n    */\n    \"requireCurlyBraces\": [\"if\", \"else\", \"for\", \"while\", \"do\"],\n\n    /*\n        Option: requireSpaceAfterKeywords\n        Requires space after keyword.\n\n        Valid example:\n\n        return true;\n\n        Invalid example:\n\n        if(x) {\n            x++;\n        }\n    */\n    \"requireSpaceAfterKeywords\": [\"if\", \"else\", \"for\", \"while\", \"do\", \"switch\", \"return\"],\n\n    /*\n        Option: disallowSpaceAfterKeywords\n        Disallows space after keyword.\n\n        Valid example:\n\n        if(x > y) {\n            y++;\n        }\n    */\n    \"disallowSpaceAfterKeywords\": [\"if\", \"else\", \"for\", \"while\", \"do\", \"switch\"],\n\n\n    /*\n        Option: requireSpacesInFunctionExpression\n        Requires space before () or {} in function declarations.\n\n        Valid examples:\n        function () {}\n        function a () {}\n\n        Invalid examples:\n        function() {}\n        function (){}\n\n    */\n    \"requireSpacesInFunctionExpression\": { \"beforeOpeningRoundBrace\": true, \"beforeOpeningCurlyBrace\": true },\n\n    /*\n        Option: disallowSpacesInFunctionExpression\n        Disallows space before () or {} in function declarations.\n\n        Valid examples:\n        function(){}\n        function a(){}\n\n        Invalid examples:\n        function () {}\n        function a (){}\n\n    */\n    \"disallowSpacesInFunctionExpression\": { \"beforeOpeningRoundBrace\": true, \"beforeOpeningCurlyBrace\": true },\n\n    /*\n        Option: disallowMultipleVarDecl\n        Disallows multiple var declaration (except for-loop).\n\n        Valid example:\n\n        var x = 1;\n        var y = 2;\n\n        for (var i = 0, j = arr.length; i < j; i++) {}\n\n        Invalid example:\n\n        var x = 1,\n            y = 2;\n    */\n    \"disallowMultipleVarDecl\": true,\n\n    /*\n        Option: requireMultipleVarDecl\n        Requires multiple var declaration.\n\n        Valid example:\n\n        var x = 1,\n            y = 2;\n\n        Invalid example:\n\n        var x = 1;\n        var y = 2;\n    */\n    \"requireMultipleVarDecl\": true,\n\n    /*\n        Option: disallowSpacesInsideObjectBrackets\n        Disallows space after opening object curly brace and before closing.\n\n        Valid example:\n\n        var x = {a: 1};\n\n        Invalid example:\n\n        var x = { a: 1 };\n    */\n    \"disallowSpacesInsideObjectBrackets\": true,\n\n    /*\n        Option: disallowSpacesInsideArrayBrackets\n        Disallows space after opening array square bracket and before closing.\n\n        Valid example:\n\n        var x = [1];\n\n        Invalid example:\n\n        var x = [ 1 ];\n    */\n    \"disallowSpacesInsideArrayBrackets\": true,\n\n    /*\n        Option: disallowSpacesInsideParentheses\n        Disallows space after opening round bracket and before closing.\n\n        Valid example:\n\n        var x = (1 + 2) * 3;\n\n        Invalid example:\n\n        var x = ( 1 + 2 ) * 3;\n    */\n    \"disallowSpacesInsideParentheses\": true,\n\n    /*\n        Option: requireSpacesInsideObjectBrackets\n        Possible values: \"all\" for strict mode, \"allButNested\" ignores closing brackets in a row.\n        Requires space after opening object curly brace and before closing.\n\n        Valid example for mode \"all\":\n\n        var x = { a: { b: 1 } };\n\n        Valid example for mode \"allButNested\":\n\n        var x = { a: { b: 1 }};\n\n        Invalid example:\n\n        var x = {a: 1};\n    */\n    \"requireSpacesInsideObjectBrackets\": \"all\",\n\n    /*\n        Option: requireSpacesInsideArrayBrackets\n        Possible values: \"all\" for strict mode, \"allButNested\" ignores closing brackets in a row.\n        Requires space after opening array square bracket and before closing.\n\n        Valid example for mode \"all\":\n\n        var x = [ 1 ];\n\n        Valid example for mode \"allButNested\":\n\n        var x = [[ 1 ], [ 2 ]];\n\n        Invalid example:\n\n        var x = [1];\n    */\n    \"requireSpacesInsideArrayBrackets\": \"all\",\n\n    /*\n        Option: disallowQuotedKeysInObjects\n        Possible values:\n            `true`: for strict mode,\n            \"allButReserved\" allows ES3+ reserved words to remain quoted. This is helpfull when using this option with JSHint's `es3` option.\n        Disallows quoted keys in object if possible.\n\n        Valid example for mode true:\n\n        var x = { a: { default: 1 } };\n\n        Valid example for mode \"allButReserved\":\n\n        var x = {a: 1, 'default': 2};\n\n        Invalid example:\n\n        var x = {'a': 1};\n    */\n    \"disallowQuotedKeysInObjects\": true,\n\n    /*\n        Option: disallowSpaceAfterObjectKeys\n        Disallows space after object keys.\n\n        Valid example:\n\n        var x = {a: 1};\n\n        Invalid example:\n\n        var x = {a : 1};\n    */\n    \"disallowSpaceAfterObjectKeys\": true,\n\n    /*\n        Option: requireSpaceAfterObjectKeys\n        Requires space after object keys.\n\n        Valid example:\n\n        var x = {a : 1};\n\n        Invalid example:\n\n        var x = {a: 1};\n    */\n    \"requireSpaceAfterObjectKeys\": true,\n\n    /*\n        Option: requireAlignedObjectValues\n        Possible values:\n            \"all\" for strict mode,\n            \"skipWithFunction\" ignores objects if one of the property values is a function expression,\n            \"skipWithLineBreak\" ignores objects if there are line breaks between properties\n        Requires proper alignment in object literals.\n\n        Valid example:\n\n        var x = {\n            a   : 1,\n            bcd : 2,\n            ef  : 'str'\n        };\n\n        Invalid example:\n\n        var x = {\n            a : 1,\n            bcd : 2,\n            ef : 'str'\n        };\n    */\n    \"requireAlignedObjectValues\": \"all\",\n\n    /*\n        Option: disallowLeftStickedOperators\n        Disallows sticking operators to the left.\n\n        Valid example:\n\n        x = y ? 1 : 2;\n\n        Invalid example:\n\n        x = y? 1 : 2;\n    */\n    \"disallowLeftStickedOperators\": [\"?\", \"+\", \"-\", \"/\", \"*\", \"=\", \"==\", \"===\", \"!=\", \"!==\", \">\", \">=\", \"<\", \"<=\"],\n\n    /*\n        Option: requireRightStickedOperators\n        Requires sticking operators to the right.\n\n        Valid example:\n\n        x = !y;\n\n        Invalid example:\n\n        x = ! y;\n    */\n    \"requireRightStickedOperators\": [\"!\"],\n\n    /*\n        Option: disallowRightStickedOperators\n        Disallows sticking operators to the right.\n\n        Valid example:\n\n        x = y + 1;\n\n        Invalid example:\n\n        x = y +1;\n    */\n    \"disallowRightStickedOperators\": [\"?\", \"+\", \"/\", \"*\", \":\", \"=\", \"==\", \"===\", \"!=\", \"!==\", \">\", \">=\", \"<\", \"<=\"],\n\n    /*\n        Option: requireLeftStickedOperators\n        Requires sticking operators to the left.\n\n        Valid example:\n\n        x = [1, 2];\n\n        Invalid example:\n\n        x = [1 , 2];\n    */\n    \"requireLeftStickedOperators\": [\",\"],\n\n    /*\n        Option: disallowSpaceAfterPrefixUnaryOperators\n        Requires sticking unary operators to the right.\n\n        Valid example:\n\n        x = !y; y = ++z;\n\n        Invalid example:\n\n        x = ! y; y = ++ z;\n    */\n    \"disallowSpaceAfterPrefixUnaryOperators\": [\"++\", \"--\", \"+\", \"-\", \"~\", \"!\"],\n\n    /*\n        Option: requireSpaceAfterPrefixUnaryOperators\n        Disallows sticking unary operators to the right.\n\n        Valid example:\n\n        x = ! y; y = ++ z;\n\n        Invalid example:\n\n        x = !y; y = ++z;\n    */\n    \"requireSpaceAfterPrefixUnaryOperators\": [\"++\", \"--\", \"+\", \"-\", \"~\", \"!\"],\n\n    /*\n        Option: disallowSpaceBeforePostfixUnaryOperators\n        Requires sticking unary operators to the left.\n\n        Valid example:\n\n        x = y++; y = z--;\n\n        Invalid example:\n\n        x = y ++; y = z --;\n    */\n    \"disallowSpaceBeforePostfixUnaryOperators\": [\"++\", \"--\"],\n\n    /*\n        Option: requireSpaceBeforePostfixUnaryOperators\n        Disallows sticking unary operators to the left.\n\n        Valid example:\n\n        x = y ++; y = z --;\n\n        Invalid example:\n\n        x = y++; y = z--;\n    */\n    \"requireSpaceBeforePostfixUnaryOperators\": [\"++\", \"--\"],\n\n    /*\n        Option: disallowSpaceBeforeBinaryOperators\n        Requires sticking binary operators to the left.\n\n        Valid example:\n\n        x+ y;\n\n        Invalid example:\n\n        x + y;\n    */\n    \"disallowSpaceBeforeBinaryOperators\": [\"+\", \"-\", \"/\", \"*\", \"=\", \"==\", \"===\", \"!=\", \"!==\"],\n\n    /*\n        Option: requireSpaceBeforeBinaryOperators\n        Disallows sticking binary operators to the left.\n\n        Valid example:\n\n        x !== y;\n\n        Invalid example:\n\n        x!== y;\n    */\n    \"requireSpaceBeforeBinaryOperators\": [\"+\", \"-\", \"/\", \"*\", \"=\", \"==\", \"===\", \"!=\", \"!==\"],\n\n    /*\n        Option: disallowSpaceAfterBinaryOperators\n        Requires sticking binary operators to the right.\n\n        Valid example:\n\n        x +y;\n\n        Invalid example:\n\n        x+ y;\n    */\n    \"disallowSpaceAfterBinaryOperators\": [\"+\", \"-\", \"/\", \"*\", \"=\", \"==\", \"===\", \"!=\", \"!==\"],\n\n    /*\n        Option: requireSpaceAfterBinaryOperators\n        Disallows sticking binary operators to the right.\n\n        Valid example:\n\n        x + y;\n\n        Invalid example:\n\n        x +y;\n    */\n    \"requireSpaceAfterBinaryOperators\": [\"+\", \"-\", \"/\", \"*\", \"=\", \"==\", \"===\", \"!=\", \"!==\"],\n\n    /*\n        Option: disallowImplicitTypeConversion\n        Disallows implicit type conversion.\n\n        Valid example:\n\n        x = Boolean(y);\n        x = Number(y);\n        x = String(y);\n        x = s.indexOf('.') !== -1;\n\n        Invalid example:\n\n        x = !!y;\n        x = +y;\n        x = '' + y;\n        x = ~s.indexOf('.');\n    */\n    \"disallowImplicitTypeConversion\": [\"numeric\", \"boolean\", \"binary\", \"string\"],\n\n    /*\n        Option: disallowKeywords\n        Disallows usage of specified keywords.\n\n        Invalid example:\n\n        with (x) {\n            prop++;\n        }\n    */\n    \"disallowKeywords\": [\"with\"],\n\n    /*\n        Option: disallowMultipleLineBreaks\n        Disallows multiple blank lines in a row.\n\n        Invalid example:\n\n        var x = 1;\n\n\n        x++;\n    */\n    \"disallowMultipleLineBreaks\": true,\n\n    /*\n        Option: validateLineBreaks\n        Possible values: \"CR\", \"LF\", \"CRLF\"\n        Option to check line break characters\n\n        Invalid example:\n\n        var x = 1;<CRLF>\n        x++;\n    */\n    \"validateLineBreaks\": \"LF\",\n\n    /*\n        Option: disallowKeywordsOnNewLine\n        Disallows placing keywords on a new line.\n\n        Valid example:\n\n        if (x < 0) {\n            x++;\n        } else {\n            x--;\n        }\n\n        Invalid example:\n\n        if (x < 0) {\n            x++;\n        }\n        else {\n            x--;\n        }\n    */\n    \"disallowKeywordsOnNewLine\": [\"else\"],\n\n    /*\n        Option: requireKeywordsOnNewLine\n        Requires placing keywords on a new line.\n\n        Valid example:\n\n        if (x < 0) {\n            x++;\n        }\n        else {\n            x--;\n        }\n\n        Invalid example:\n\n        if (x < 0) {\n            x++;\n        } else {\n            x--;\n        }\n    */\n    \"requireKeywordsOnNewLine\": [\"else\"],\n\n    /*\n        Option: requireLineFeedAtFileEnd\n        Requires placing line feed at file end.\n    */\n    \"requireLineFeedAtFileEnd\": true,\n\n    /*\n        Option: safeContextKeyword\n        Option to check \"var that = this\" expressions\n\n        Valid example:\n\n        var that = this;\n\n        Invalid example:\n\n        var _this = this;\n    */\n    \"safeContextKeyword\": \"that\",\n\n    /*\n        Option: validateJSDoc\n        Enables jsdoc validation.\n\n        Option: validateJSDoc.checkParamNames\n        Ensures param names in jsdoc and in function declaration are equal.\n\n        Option: validateJSDoc.requireParamTypes\n        Ensures params in jsdoc contains type.\n\n        Option: validateJSDoc.checkRedundantParams\n        Reports redundant params in jsdoc.\n    */\n    \"validateJSDoc\": {\n        \"checkParamNames\": true,\n        \"checkRedundantParams\": true,\n        \"requireParamTypes\": true\n    },\n\n    /*\n        Option: excludeFiles\n        Disables style checking for specified paths.\n    */\n    \"excludeFiles\": [\"node_modules/**\"],\n\n    /*\n        Option: additionalRules\n        Pluggable rules \n    */\n    \"additionalRules\": [\"project-rules/*.js\"]\n}\n```\n\nBrowser Usage\n-------------\n\nFile `jscs-browser.js` contains browser-compatible version of `jscs`.\n\nDownload and include `jscs-browser.js` into your page.\n\nExample:\n\n```html\n<script type=\"text/javascript\" src=\"jscs-browser.js\"></script>\n<script type=\"text/javascript\">\nvar checker = new JscsStringChecker();\nchecker.registerDefaultRules();\nchecker.configure({disallowMultipleVarDecl: true});\nvar errors = checker.checkString('var x, y = 1;');\nerrors.getErrorList().forEach(function(error) {\n    console.log(errors.explainError(error));\n});\n</script>\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mdevils/node-jscs/issues"
  },
  "homepage": "https://github.com/mdevils/node-jscs",
  "_id": "jscs@1.0.14",
  "dist": {
    "shasum": "41ec6de1c86bbfb34d35c43056f6369d009c00e2"
  },
  "_from": "jscs@1.0.14",
  "_resolved": "https://registry.npmjs.org/jscs/-/jscs-1.0.14.tgz"
}

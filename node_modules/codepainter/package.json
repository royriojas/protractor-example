{
  "name": "codepainter",
  "version": "0.3.30",
  "author": {
    "name": "Jakub Wieczorek",
    "email": "jakubw@jakubw.net"
  },
  "description": "A JavaScript beautifier that can both infer coding style and transform code to reflect that style. You can also set style preferences explicitly in a variety of ways.",
  "contributors": [
    {
      "name": "Jed Mao",
      "email": "jed.hunsaker[at]gmail.com"
    },
    {
      "name": "Jakub Wieczorek",
      "email": "jakubw@jakubw.net",
      "url": "http://jakubw.net"
    }
  ],
  "main": "./codepainter",
  "bin": {
    "codepaint": "./bin/codepaint",
    "codepainter": "./bin/codepaint"
  },
  "scripts": {
    "test": "mocha -R spec",
    "codepaint": "codepaint xform -e **/**.js"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/jedmao/codepainter.git"
  },
  "bugs": {
    "url": "https://github.com/jedmao/codepainter/issues"
  },
  "keywords": [
    "code",
    "formatting",
    "style",
    "editorconfig"
  ],
  "dependencies": {
    "async": "^0.8.0",
    "cli-color": "^0.3.2",
    "editorconfig": "^0.11.4",
    "esprima": "^1.2.1",
    "gitlike-cli": "0.0.10",
    "glob": "^3.2.9",
    "memorystream": "^0.2.0",
    "mkdirp": "^0.5.0",
    "node.extend": "^1.0.10"
  },
  "devDependencies": {
    "mocha": "^1.18.2",
    "should": "^3.3.1"
  },
  "engine": "node >= 0.10.6",
  "license": "MIT",
  "readme": "# Code Painter\n\n[![Build Status][]](http://travis-ci.org/jedmao/codepainter)\n[![Dependency Status][]](https://gemnasium.com/jedmao/codepainter)\n[![NPM version](https://badge.fury.io/js/codepainter.png)](http://badge.fury.io/js/codepainter)\n[![Views](https://sourcegraph.com/api/repos/github.com/jedmao/codepainter/counters/views-24h.png)](https://sourcegraph.com/github.com/jedmao/codepainter)\n\n[![NPM](https://nodei.co/npm/codepainter.png?downloads=true)](https://nodei.co/npm/codepainter/)\n\nCode Painter is a JavaScript beautifier that can transform JavaScript files\ninto the formatting style of your choice. Style settings can be supplied via\npredefined styles, a custom JSON file, command line settings, [EditorConfig][]\nsettings or it can even be inferred from one or more sample files. For example,\nyou could provide a code snippet from the same project with which the new code\nis intended to integrate.\n\nIt uses the excellent [Esprima parser][] by [Ariya Hidayat][] and his\n[contributors][] â€” thanks!\n\nThe name is inspired by Word's Format Painter, which does a similar job for\nrich text.\n\n\n## Requirements\n\nCode Painter requires [Node.js][] version 0.10.6 or above.\n\n\n## Installation\n\n    $ npm install codepainter\n\nTo access the command globally, do a global install:\n\n    $ npm install -g codepainter\n\n*nix users might also have to add the following to their .bashrc file:\n\n    PATH=$PATH:/usr/local/share/npm/bin\n\n\n## CLI Usage\n\nYou can see the usage in the CLI directly by typing `codepaint` or\n`codepaint --help`.\n\n```\n$ codepaint --help\n\n  Code Painter beautifies JavaScript.\n\n  Usage: codepaint [options] <command>\n\n  Commands:\n\n    infer [options] <globs>...  Infer formatting style from file(s)\n    xform [options] <globs>...  Transform file(s) to specified style\n\n  Options:\n\n    -h, --help     output help information\n    -V, --version  output version information\n\n\n$ codepaint infer --help\n\n  Infer formatting style from file(s)\n\n  Usage: infer [options] <globs>...\n\n  Options:\n\n    -h, --help     output help information\n    -d, --details  give a detailed report with trend scores\n\n  Examples:\n\n    $ codepaint infer \"**/*.js\"\n    $ codepaint infer \"**/*view.js\" \"**/*model.js\"\n    $ codepaint infer %s \"**/*.js\" -m\n    $ codepaint infer %s \"**/*.js\" -e inferred.json\n\n\n$ codepaint xform --help\n\n  Transform file(s) to specified formatting style\n\n  Usage: xform [options] <globs>...\n\n  Options:\n\n    -h, --help                 output help information\n    -i, --infer <glob>         code sample(s) to infer\n    -p, --predef <name>        cascade predefined style (e.g., idiomatic)\n    -j, --json <path>          cascade JSON style over predef style\n    -s, --style <key>=<value>  cascade explicit style over JSON\n    -e, --editor-config        cascade EditorConfig style over all others\n\n  Examples:\n\n    $ codepaint xform \"**/*.js\"\n    $ codepaint xform \"**/*view.js\" \"**/*model.js\"\n    $ codepaint xform %s \"**/*.js\" -i sample.js\n    $ codepaint xform %s \"**/*.js\" -p idiomatic\n    $ codepaint xform %s \"**/*.js\" -j custom.json\n    $ codepaint xform %s \"**/*.js\" -s quote_type=null\n    $ codepaint xform %s \"**/*.js\" -s indent_style=space -s indent_size=4\n    $ codepaint xform %s \"**/*.js\" -e\n```\n\n\n## Library Usage\n\n```js\nvar codepaint = require('codepainter');\n```\n\nLibrary usage is intended to be every bit the same as CLI usage, so you can\nexpect the same options and arguments that the CLI requires.\n\n### .infer(< path|glob|globs|ReadableStream >[,options][,callback])\n\nExample usage:\n\n```js\ncodepaint.infer('**/**.js', {details: true}, function(inferredStyle) {\n    console.log(inferredStyle);\n});\n```\n\n### .xform(< path|glob|globs|ReadableStream >[,options][,callback])\n\nExample usage:\n\n```js\ncodepaint.xform('input.js', {indent_size: 4}, function(err, xformed, skipped, errored){\n    if (err) {\n        throw err;\n    }\n    console.log('transformed:', xformed);\n    console.log('skipped:', skipped);\n    console.log('errored:', errored);\n});\n```\n\nThe following example infers formatting style from `sample.js` and uses that\ninferred style to transform all .js files under the current directory.\n\n```js\ncodepaint.infer('sample.js', function(inferredStyle) {\n    codepainter.xform('**/**.js', {style: inferredStyle});\n});\n```\n\n'sample.js' could also be an array or any readable stream. `transform` is an\nalias for the `xform` method. You can use either one.\n\nGreat, so that's all nice and simple, but maybe you want to do something with\nthe output. We start by creating an instance of the Transformer class.\n\n```js\nvar Transformer = require('codepainter').Transformer;\nvar transformer = new Transformer();\n```\n\nNow, we can listen to any of the following events:\n\n### cascade\n\nEvery time one style cascades over another.\n\n```js\ntransformer.on('cascade', cascade);\nfunction cascade(styleBefore, styleToMerge, styleType) {\n    // code here\n}\n```\n\n### transform\n\nEvery time a file is transformed.\n\n```js\ntransformer.on('transform', function(transformed, path) {\n    // code here\n}\n```\n\n### error\n\n```js\ntransformer.on('error', function(err, inputPath) {\n    // code here\n}\n```\n\n### end\n\nWhen all transformations have taken place.\n\n```js\ntransformer.on('end', function(err, transformed, skipped, errored) {\n    // code here\n}\n```\n\nOf course, none of these events will fire if you don't perform the transform:\n\n`transformer.transform(globs, options);`\n\n\n## CLI Examples\n\n    $ codepaint infer \"**/*.js\"\n\nInfers formatting style from all .js files under the current directory into a\nsingle JSON object, which you can pipe out to another file if you want. It can\nthen be used in a transformation (below).\n\n    $ codepaint xform \"**/*.js\"\n\nThis doesn't transform any files, but it does show you how many files would be\naffected by the glob you've provided. Globs absolutely *must* be in quotes or\nyou will experience unexpected behavior!\n\n    $ codepaint xform -i infer.js \"**/*.js\"\n\nTransforms all .js files under the current directory with the formatting style\ninferred from infer.js\n\n    $ codepaint xform -p idiomatic \"**/*.js\"\n\nTransforms all .js files under the current directory with a Code Painter\npre-defined style. In this case, Idiomatic. The only other pre-defined styles\navailable at this time are mediawiki and hautelook.\n\n    $ codepaint xform -j custom.json \"**/*.js\"\n\nTransforms all .js files under the current directory with a custom style in\nJSON format.\n\n    $ codepaint xform -s indent_style=space -s indent_size=4 \"**/*.js\"\n\nTransforms all .js files under the current directory with 2 settings:\n`indent_style=space` and `indent_size=4`. You can specify as many settings as\nyou want and you can set values to `null` to disable them.\n\n    $ codepaint xform -e \"**/*.js\"\n\nTransforms all .js files under the current directory with the EditorConfig\nsettings defined for each individual file.\n\nRefer to [EditorConfig Core Installation][] for installation instructions and\n[EditorConfig][] for more information, including how to define and use\n`.editorconfig` files.\n\n    $ codepaint xform -i infer.js -p idiomatic -j custom.json\n    -s end_of_line=null -e  \"**/*.js\"\n\nAs you can see, you can use as many options as you want. Code Painter will\ncascade your styles and report how the cascade has been performed, like so:\n\n```\n  Inferred style:\n   + indent_style = tab\n   + insert_final_newline = true\n   + quote_type = auto\n   + space_after_anonymous_functions = false\n   + space_after_control_statements = false\n   + spaces_around_operators = false\n   + trim_trailing_whitespace = false\n   + spaces_in_brackets = false\n\n  hautelook style:\n   * indent_style = space\n   + indent_size = 4\n   * trim_trailing_whitespace = true\n   + end_of_line = lf\n   = insert_final_newline = true\n   = quote_type = auto\n   * spaces_around_operators = true\n   = space_after_control_statements = true\n   = space_after_anonymous_functions = false\n   * spaces_in_brackets = false\n\n  Supplied JSON file:\n   * space_after_control_statements = true\n   = indent_style = space\n   * indent_size = 3\n\n  Inline styles:\n   x end_of_line = null\n\n  Editor Config:\n   + applied on a file-by-file basis\n\n  ...........................\n\n  REPORT: 27 files transformed\n```\n\n\n## Supported Style Properties\n\n### **codepaint**: *false*\n\nTells CodePainter to skip the file (no formatting). This property really\nonly makes sense if you are using the `--editor-config` CLI option. This\nallows you to, for example, skip a vendor scripts directory.\n\n### EditorConfig properties\n**indent_style**, **indent_size**, **end_of_line**,\n**trim_trailing_whitespace** and **insert_final_newline**.\n\nRefer to [EditorConfig's documentation][] for more information.\n\n### **quote_type**: *single*, *double*, *auto*\n\nSpecifies what kind of quoting you would like to use for string literals:\n\n```js\nconsole.log(\"Hello world!\"); // becomes console.log('Hello world!');\n```\n\n Adds proper escaping when necessary, obviously.\n\n```js\nconsole.log('Foo \"Bar\" Baz'); // becomes console.log(\"Foo \\\"Bar\\\" Baz\");\n```\n\nThe *auto* setting infers the quoting with a precedence toward *single*\nmode.\n\n```js\nconsole.log(\"Foo \\\"Bar\\\" Baz\"); // becomes console.log('Foo \"Bar\" Baz');\nconsole.log('Foo \\'Bar\\' Baz'); // becomes console.log(\"Foo 'Bar' Baz\");\n```\n\n###  **space_after_control_statements**: *true*, *false*\n\nSpecifies whether or not there should be a space between if/for/while and\nthe following open paren:\n\nIf true:\n\n```js\nif(x === 4) {} // becomes if (x === 4) {}\n```\n\nIf false:\n\n```js\nwhile (foo()) {} // becomes while(foo()) {}\n```\n\n### **space_after_anonymous_functions**: *true*, *false*\n\nSpecifies whether or not there should be a space between the `function`\nkeyword and the following parens in anonymous functions:\n\n```js\nfunction(x) {} // becomes function (x) {}\n```\n\n### **spaces_around_operators**: *true*, *false*, *hybrid*\n\nSpecifies whether or not there should be spaces around operators such as\n`+,=,+=,>=,!==`.\n\n```js\nx = 4; // becomes x=4;\na>=b; // becomes a >= b;\na>>2; // becomes a >> 2;\n```\n\nUnary operators `!,~,+,-` are an exception to the rule; thus, no spaces\nare added. Also, any non-conditional `:` operators do not receive a space\n(i.e., the switch...case operator and property identifiers):\n\n```js\nswitch (someVar) {\n    case 'foo' : // becomes case 'foo':\n        var x = {foo : 'bar'}; // becomes {foo: 'bar'}\n        break;\n}\n```\n\n*Hybrid* mode is mostly like the *true* setting, except it behaves as\n*false* on operators `*,/,%`:\n\n```js\nvar x = 4 * 2 + 1 / 7; // becomes var x = 4*2 + 1/7;\n```\n\n###  **spaces_in_brackets**: *true*, *false*, *hybrid*\n\nSpecifies whether or not there should be spaces inside brackets, which\nincludes `(),[],{}`. Empty pairs of brackets will always be shortened.\n\nIf true:\n\n```js\nif (x === 4) {} // becomes if ( x === 4 ) {}\n```\n\nIf false:\n\n```js\nif ( x === 4 ) {} // becomes if (x === 4)\n```\n\nThe *hybrid* setting mostly reflects Idiomatic style. Refer to\n[Idiomatic Style Manifesto][].\n\n\n## Pipes and Redirects\n\nOn a unix command-line, you can transform a file from the stdin stream:\n\n    $ codepaint xform -s indent_size=2 < input.js\n\nThe stdout stream works a bit differently. Since Code Painter can transform\nmultiple files via glob syntax, it wouldn't make sense to output the\ntransformations of all those files to a single stream. Instead, only if you\nare using stdin as input and no `-o, --output` option is provided will Code\nPainter send the transformation to the stdout stream:\n\n    $ codepaint xform -s indent_size=2 < input.js > output.js\n\nPiping is supported as well:\n\n    $ codepaint xform -s indent_size=2 < input.js | othercommand`\n\n\n## Git Clean and Smudge Filters\n\nBecause Code Painter supports stdin and stdout streams, as explained above,\nGit \"clean\" and \"smudge\" filters can be used as well.\n\n**CAUTION:** My personal experience has shown inconsistent results, so use with\ncaution! Also, please contact me if you figure out how to do this without any\nhiccups.\n\nFirst, change your `.gitattributes` file to use your new filter. We'll call it\n\"codepaint\".\n\n    *.js   filter=codepaint\n\nThen, tell Git what the \"codepaint\" filter does. First, we will convert code\nto tabs upon checkout with the \"smudge\" filter:\n\n    $ git config filter.codepaint.smudge \"codepaint xform -s indent_style=tab\"\n\nThen, upon staging of files with the Git \"clean\" filter, the style is restored\nto spaces and cleaned to reflect any other style preferences you may have set:\n\n    $ git config filter.codepaint.clean \"codepaint xform -p style.json\"\n\nThis allows you to work in the indentation of your preference without stepping\non anyone's toes and checking in inconsistent indentation. Or maybe you have\nyour own preference for spaces around operators? Smudge it to your preference\nand clean it to your company's formatting style.\n\n**WARNING:** Git \"clean\" and \"smudge\" filters are bypassed with GitHub for\nWindows.\n\nRefer to [Git's documentation][] for more information on Git \"smudge\" and\n\"clean\" filters.\n\n\n## Recommended Use\n\nIt is highly recommended that you use the EditorConfig approach to painting\nyour code. To do so, do the following:\n\nPlace an `.editorconfig` file at your project root. Refer to this\nproject's [.editorconfig][] file for a point of reference as to how this\nmight look. You can also scatter `.editorconfig` files elsewhere\nthroughout your project to prevent Code Painter from doing any\ntransformations (e.g., your vendor scripts folders). In this case, the\n`.editorconfig` file would simply read: `codepaint = false`.\n\nSpecify Code Painter in your devDependencies section of your package.json:\n\n```json\n{\n    \"devDependencies\": {\n        \"codepainter\": \"~0.3.15\"\n    }\n}\n```\n\nDefine a `codepaint` script in the scripts section of your package.json:\n\n```json\n{\n    \"scripts\": {\n        \"codepaint\": \"node node_modules/codepainter/bin/codepaint xform -e **/**.js\"\n    }\n}\n```\n\nIf you have Code Painter installed globally, the command is as simple as:\n\n```json\n{\n    \"scripts\": {\n        \"codepaint\": \"codepaint xform -e **/**.js\"\n    }\n}\n```\n\nBut Code Painter wouldn't install globally by default, so the first\napproach is the recommended one. Then, you can run Code Painter on your\nentire project, consistently, with the following command:\n\n    $ npm run-script codepaint\n\nYou *could* run `codepaint` manually every time you want to do it, but you\nmight find this next `.bashrc` shortcut more useful. The idea is to run\nthis `gc` alias to a newly-defined `codepaint_git_commit` function. This,\nyou do instead of running `git commit`. The caveat is that you need to\nstage your changes with `git add` before doing so. This is because the\ncommand runs `codepaint` only on staged `.js` files. Aside from this\ncaveat, you can commit things mostly the same as you were used to before.\nNow, `gc` can paint your code before a commit and bail-out of the commit\nif there are issues with the process (e.g., JavaScript parse errors). The\nidea of formatting code before a commit is definitely controversial, but\nif you choose to do so anyway, here's the neat trick to put in your\n`.bashrc` file:\n\n```bash\n# Example usage: gc \"initial commit\"\nalias gc=codepaint_git_commit\ncodepaint_git_commit() {\n    # 1. Gets a list of .js files in git staging and sends the list to CodePainter.\n    # 2. CodePainter with the -e flag applies rules defined in your EditorConfig file(s).\n    # 3. After CodePainter is done, your args are passed to the `git commit` command.\n    jsfiles=$(git diff --name-only --cached | egrep '\\.js$')\n    if [ $jsfiles ]; then\n        ./node_modules/codepainter/bin/codepaint xform -e $jsfiles\n    fi\n    git commit -m \"$@\"\n}\n```\n\nYou could also compare Code Painter's output with the original file on a Git\npre-commit hook and reject the commit if the files don't match. Let's be real\nthough. This would happen almost *every* time you commit and it would be a\nroyal pain in your workflow.\n\nThere are so many ways you could use Code Painter. How do you prefer to use\nCode Painter? Feel free to contact me, Jed, with tips or suggestions. See\n[package.json][] for contact information).\n\n\n## Enforcing\n\nCode Painter can be used to enforce a formatting style in a number of creative\nways. To fail [Travis CI][] if code does not comply with your organization's\nstyle guide, the process would work something like this:\n\n1. Run Code Painter on the code base.\n1. Fail Travis if any file changes are detected. This encourages developers\nto run Code Painter before pushing code.\n\nRunning Code Painter with Travis is as simple as adding the command to the\n`before_script` section of your `.travis.yml` file:\n```yaml\nbefore_script:\n  - node node_modules/codepainter/bin/codepaint xform -e \"**/**.js\"\n```\n\nNotice I didn't use the command `npm run-script codepaint`. This is because\nthere were issues with the double-quoted glob being processed. If you find a\nway around this, please let me know.\n\nNext, you need to create a node script that exits the node process with a\nnon-zero code if any changes are detected. This, we do with `git diff`:\n```js\nvar clc = require('cli-color');\nvar spawn = require('child_process').spawn;\nvar git = spawn('git', ['diff', '--name-only']);\n\ngit.stdout.setEncoding('utf8');\ngit.stdout.on('data', exitWithErrorIfFilesHaveChanged);\n\nfunction exitWithErrorIfFilesHaveChanged(data) {\n    console.log();\n    console.log(clc.red('Error: The following files do not conform to the CompanyX style guide:'));\n    console.log(data);\n    process.exit(1);\n}\n```\n\nFinally, you can add this script to your `.travis.yml` file in the `script`\nsection:\n```yaml\nscript:\n  - node gitdiff.js\n```\n\nViolÃ¤! Travis should now fail if code does not comply with your organization's\nstyle guide.\n\n\n## License\n\nReleased under the MIT license.\n\n[Build Status]: https://secure.travis-ci.org/jedmao/codepainter.png?branch=master\n[Dependency Status]: https://gemnasium.com/jedmao/codepainter.png\n[Esprima parser]: http://esprima.org/\n[Ariya Hidayat]: http://ariya.ofilabs.com/\n[contributors]: https://github.com/ariya/esprima/graphs/contributors\n[Node.js]: http://nodejs.org/\n[EditorConfig]: http://editorconfig.org/\n[EditorConfig's documentation]: http://editorconfig.org/\n[EditorConfig Core Installation]: /editorconfig/editorconfig-core#installation\n[Idiomatic Style Manifesto]: /rwldrn/idiomatic.js/#whitespace\n[.editorconfig]: .editorconfig\n[package.json]: package.json\n[Git's documentation]: http://git-scm.com/book/ch7-2.html\n[Travis CI]: https://travis-ci.org/\n\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/jedmao/codepainter/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/jedmao/codepainter",
  "_id": "codepainter@0.3.30",
  "_from": "codepainter@~0.3.27"
}
